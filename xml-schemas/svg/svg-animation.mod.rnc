# .......................................................................

# SVG 1.1 Animation Module ..............................................

# file: svg-animation.mod
# 
# This is SVG, a language for describing two-dimensional graphics in XML.
# Copyright 2001, 2002 W3C (MIT, INRIA, Keio), All Rights Reserved.
# Revision: $Id: svg-animation.mod,v 1.3 2002/10/24 17:40:14 fujisawa Exp $
# 
# This DTD module is identified by the PUBLIC and SYSTEM identifiers:
# 
#    PUBLIC "-//W3C//ELEMENTS SVG 1.1 Animation//EN"
#    SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg-animation.mod"
# 
# .......................................................................

# Animation
# 
#    animate, set, animateMotion, animateColor, animateTransform, mpath
# 
# This module declares markup to provide support for animation.

# Qualified Names (Default) .........................

# Attribute Collections (Default) ...................

# SVG.Animation.class ...............................

# SVG.Animation.attrib ..............................

default namespace = "http://www.w3.org/2000/svg"
namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"

SVG.Animation.extra.attrib = empty
SVG.Animation.attrib = SVG.XLink.attrib, SVG.Animation.extra.attrib
# SVG.AnimationAttribute.attrib .....................
SVG.AnimationAttribute.extra.attrib = empty
SVG.AnimationAttribute.attrib =
  attribute attributeName { text },
  attribute attributeType { text }?,
  SVG.AnimationAttribute.extra.attrib
# SVG.AnimationTiming.attrib ........................
SVG.AnimationTiming.extra.attrib = empty
SVG.AnimationTiming.attrib =
  attribute begin { text }?,
  attribute dur { text }?,
  attribute end { text }?,
  attribute min { text }?,
  attribute max { text }?,
  [ a:defaultValue = "always" ]
  attribute restart { "always" | "never" | "whenNotActive" }?,
  attribute repeatCount { text }?,
  attribute repeatDur { text }?,
  [ a:defaultValue = "remove" ] attribute fill { "remove" | "freeze" }?,
  SVG.AnimationTiming.extra.attrib
# SVG.AnimationValue.attrib .........................
SVG.AnimationValue.extra.attrib = empty
SVG.AnimationValue.attrib =
  [ a:defaultValue = "linear" ]
  attribute calcMode { "discrete" | "linear" | "paced" | "spline" }?,
  attribute values { text }?,
  attribute keyTimes { text }?,
  attribute keySplines { text }?,
  attribute from { text }?,
  attribute to { text }?,
  attribute by { text }?,
  SVG.AnimationValue.extra.attrib
# SVG.AnimationAddtion.attrib .......................
SVG.AnimationAddtion.extra.attrib = empty
SVG.AnimationAddtion.attrib =
  [ a:defaultValue = "replace" ]
  attribute additive { "replace" | "sum" }?,
  [ a:defaultValue = "none" ] attribute accumulate { "none" | "sum" }?,
  SVG.AnimationAddtion.extra.attrib
# animate: Animate Element ..........................
SVG.animate.extra.content = notAllowed
SVG.animate.content =
  (SVG.Description.class | SVG.animate.extra.content)*
animate = element animate { attlist.animate, SVG.animate.content }
# end of SVG.animate.element
attlist.animate &=
  SVG.Core.attrib,
  SVG.Conditional.attrib,
  SVG.AnimationEvents.attrib,
  SVG.External.attrib,
  SVG.Animation.attrib,
  SVG.AnimationAttribute.attrib,
  SVG.AnimationTiming.attrib,
  SVG.AnimationValue.attrib,
  SVG.AnimationAddtion.attrib
# end of SVG.animate.attlist

# set: Set Element ..................................
SVG.set.extra.content = notAllowed
SVG.set.content = (SVG.Description.class | SVG.set.extra.content)*
set = element set { attlist.set, SVG.set.content }
# end of SVG.set.element
attlist.set &=
  SVG.Core.attrib,
  SVG.Conditional.attrib,
  SVG.AnimationEvents.attrib,
  SVG.External.attrib,
  SVG.Animation.attrib,
  SVG.AnimationAttribute.attrib,
  SVG.AnimationTiming.attrib,
  attribute to { text }?
# end of SVG.set.attlist

# animateMotion: Animate Motion Element .............
SVG.animateMotion.extra.content = empty
SVG.animateMotion.content =
  SVG.Description.class*, mpath?, SVG.animateMotion.extra.content
animateMotion =
  element animateMotion {
    attlist.animateMotion, SVG.animateMotion.content
  }
# end of SVG.animateMotion.element
attlist.animateMotion &=
  SVG.Core.attrib,
  SVG.Conditional.attrib,
  SVG.AnimationEvents.attrib,
  SVG.External.attrib,
  SVG.Animation.attrib,
  SVG.AnimationTiming.attrib,
  SVG.AnimationAddtion.attrib,
  [ a:defaultValue = "paced" ]
  attribute calcMode { "discrete" | "linear" | "paced" | "spline" }?,
  attribute values { text }?,
  attribute keyTimes { text }?,
  attribute keySplines { text }?,
  attribute from { text }?,
  attribute to { text }?,
  attribute by { text }?,
  attribute path { text }?,
  attribute keyPoints { text }?,
  attribute rotate { text }?,
  attribute origin { text }?
# end of SVG.animateMotion.attlist

# animateColor: Animate Color Element ...............
SVG.animateColor.extra.content = notAllowed
SVG.animateColor.content =
  (SVG.Description.class | SVG.animateColor.extra.content)*
animateColor =
  element animateColor {
    attlist.animateColor, SVG.animateColor.content
  }
# end of SVG.animateColor.element
attlist.animateColor &=
  SVG.Core.attrib,
  SVG.Conditional.attrib,
  SVG.AnimationEvents.attrib,
  SVG.External.attrib,
  SVG.Animation.attrib,
  SVG.AnimationAttribute.attrib,
  SVG.AnimationTiming.attrib,
  SVG.AnimationValue.attrib,
  SVG.AnimationAddtion.attrib
# end of SVG.animateColor.attlist

# animateTransform: Animate Transform Element .......
SVG.animateTransform.extra.content = notAllowed
SVG.animateTransform.content =
  (SVG.Description.class | SVG.animateTransform.extra.content)*
animateTransform =
  element animateTransform {
    attlist.animateTransform, SVG.animateTransform.content
  }
# end of SVG.animateTransform.element
attlist.animateTransform &=
  SVG.Core.attrib,
  SVG.Conditional.attrib,
  SVG.AnimationEvents.attrib,
  SVG.External.attrib,
  SVG.Animation.attrib,
  SVG.AnimationAttribute.attrib,
  SVG.AnimationTiming.attrib,
  SVG.AnimationValue.attrib,
  SVG.AnimationAddtion.attrib,
  [ a:defaultValue = "translate" ]
  attribute type {
    "translate" | "scale" | "rotate" | "skewX" | "skewY"
  }?
# end of SVG.animateTransform.attlist

# mpath: Motion Path Element ........................
SVG.mpath.extra.content = notAllowed
SVG.mpath.content = (SVG.Description.class | SVG.mpath.extra.content)*
mpath = element mpath { attlist.mpath, SVG.mpath.content }
# end of SVG.mpath.element
attlist.mpath &=
  SVG.Core.attrib, SVG.XLinkRequired.attrib, SVG.External.attrib
# end of SVG.mpath.attlist

# end of svg-animation.mod
