# .......................................................................

# SVG 1.1 Shape Module ..................................................

# file: svg-shape.mod
# 
# This is SVG, a language for describing two-dimensional graphics in XML.
# Copyright 2001, 2002 W3C (MIT, INRIA, Keio), All Rights Reserved.
# Revision: $Id: svg-shape.mod,v 1.3 2002/10/24 17:40:16 fujisawa Exp $
# 
# This DTD module is identified by the PUBLIC and SYSTEM identifiers:
# 
#    PUBLIC "-//W3C//ELEMENTS SVG 1.1 Shape//EN"
#    SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg-shape.mod"
# 
# .......................................................................

# Shape
# 
#    path, rect, circle, line, ellipse, polyline, polygon
# 
# This module declares markup to provide support for graphical shapes.

# a list of points

default namespace = "http://www.w3.org/2000/svg"

Points.datatype = string
# Qualified Names (Default) .........................

# Attribute Collections (Default) ...................

# SVG.Shape.class ...................................

# path: Path Element ................................
SVG.path.extra.content = notAllowed
SVG.path.content =
  SVG.Description.class*,
  (SVG.Animation.class | SVG.path.extra.content)*
path = element path { attlist.path, SVG.path.content }
# end of SVG.path.element
attlist.path &=
  SVG.Core.attrib,
  SVG.Conditional.attrib,
  SVG.Style.attrib,
  SVG.Paint.attrib,
  SVG.Color.attrib,
  SVG.Opacity.attrib,
  SVG.Graphics.attrib,
  SVG.Marker.attrib,
  SVG.Clip.attrib,
  SVG.Mask.attrib,
  SVG.Filter.attrib,
  SVG.GraphicalEvents.attrib,
  SVG.Cursor.attrib,
  SVG.External.attrib,
  attribute d { PathData.datatype },
  attribute pathLength { Number.datatype }?,
  attribute transform { TransformList.datatype }?
# end of SVG.path.attlist

# rect: Rectangle Element ...........................
SVG.rect.extra.content = notAllowed
SVG.rect.content =
  SVG.Description.class*,
  (SVG.Animation.class | SVG.rect.extra.content)*
rect = element rect { attlist.rect, SVG.rect.content }
# end of SVG.rect.element
attlist.rect &=
  SVG.Core.attrib,
  SVG.Conditional.attrib,
  SVG.Style.attrib,
  SVG.Paint.attrib,
  SVG.Color.attrib,
  SVG.Opacity.attrib,
  SVG.Graphics.attrib,
  SVG.Clip.attrib,
  SVG.Mask.attrib,
  SVG.Filter.attrib,
  SVG.GraphicalEvents.attrib,
  SVG.Cursor.attrib,
  SVG.External.attrib,
  attribute x { Coordinate.datatype }?,
  attribute y { Coordinate.datatype }?,
  attribute width { Length.datatype },
  attribute height { Length.datatype },
  attribute rx { Length.datatype }?,
  attribute ry { Length.datatype }?,
  attribute transform { TransformList.datatype }?
# end of SVG.rect.attlist

# circle: Circle Element ............................
SVG.circle.extra.content = notAllowed
SVG.circle.content =
  SVG.Description.class*,
  (SVG.Animation.class | SVG.circle.extra.content)*
circle = element circle { attlist.circle, SVG.circle.content }
# end of SVG.circle.element
attlist.circle &=
  SVG.Core.attrib,
  SVG.Conditional.attrib,
  SVG.Style.attrib,
  SVG.Paint.attrib,
  SVG.Color.attrib,
  SVG.Opacity.attrib,
  SVG.Graphics.attrib,
  SVG.Clip.attrib,
  SVG.Mask.attrib,
  SVG.Filter.attrib,
  SVG.GraphicalEvents.attrib,
  SVG.Cursor.attrib,
  SVG.External.attrib,
  attribute cx { Coordinate.datatype }?,
  attribute cy { Coordinate.datatype }?,
  attribute r { Length.datatype },
  attribute transform { TransformList.datatype }?
# end of SVG.circle.attlist

# line: Line Element ................................
SVG.line.extra.content = notAllowed
SVG.line.content =
  SVG.Description.class*,
  (SVG.Animation.class | SVG.line.extra.content)*
line = element line { attlist.line, SVG.line.content }
# end of SVG.line.element
attlist.line &=
  SVG.Core.attrib,
  SVG.Conditional.attrib,
  SVG.Style.attrib,
  SVG.Paint.attrib,
  SVG.Color.attrib,
  SVG.Opacity.attrib,
  SVG.Graphics.attrib,
  SVG.Marker.attrib,
  SVG.Clip.attrib,
  SVG.Mask.attrib,
  SVG.Filter.attrib,
  SVG.GraphicalEvents.attrib,
  SVG.Cursor.attrib,
  SVG.External.attrib,
  attribute x1 { Coordinate.datatype }?,
  attribute y1 { Coordinate.datatype }?,
  attribute x2 { Coordinate.datatype }?,
  attribute y2 { Coordinate.datatype }?,
  attribute transform { TransformList.datatype }?
# end of SVG.line.attlist

# ellipse: Ellipse Element ..........................
SVG.ellipse.extra.content = notAllowed
SVG.ellipse.content =
  SVG.Description.class*,
  (SVG.Animation.class | SVG.ellipse.extra.content)*
ellipse = element ellipse { attlist.ellipse, SVG.ellipse.content }
# end of SVG.ellipse.element
attlist.ellipse &=
  SVG.Core.attrib,
  SVG.Conditional.attrib,
  SVG.Style.attrib,
  SVG.Paint.attrib,
  SVG.Color.attrib,
  SVG.Opacity.attrib,
  SVG.Graphics.attrib,
  SVG.Clip.attrib,
  SVG.Mask.attrib,
  SVG.Filter.attrib,
  SVG.GraphicalEvents.attrib,
  SVG.Cursor.attrib,
  SVG.External.attrib,
  attribute cx { Coordinate.datatype }?,
  attribute cy { Coordinate.datatype }?,
  attribute rx { Length.datatype },
  attribute ry { Length.datatype },
  attribute transform { TransformList.datatype }?
# end of SVG.ellipse.attlist

# polyline: Polyline Element ........................
SVG.polyline.extra.content = notAllowed
SVG.polyline.content =
  SVG.Description.class*,
  (SVG.Animation.class | SVG.polyline.extra.content)*
polyline = element polyline { attlist.polyline, SVG.polyline.content }
# end of SVG.polyline.element
attlist.polyline &=
  SVG.Core.attrib,
  SVG.Conditional.attrib,
  SVG.Style.attrib,
  SVG.Paint.attrib,
  SVG.Color.attrib,
  SVG.Opacity.attrib,
  SVG.Graphics.attrib,
  SVG.Marker.attrib,
  SVG.Clip.attrib,
  SVG.Mask.attrib,
  SVG.Filter.attrib,
  SVG.GraphicalEvents.attrib,
  SVG.Cursor.attrib,
  SVG.External.attrib,
  attribute points { Points.datatype },
  attribute transform { TransformList.datatype }?
# end of SVG.polyline.attlist

# polygon: Polygon Element ..........................
SVG.polygon.extra.content = notAllowed
SVG.polygon.content =
  SVG.Description.class*,
  (SVG.Animation.class | SVG.polygon.extra.content)*
polygon = element polygon { attlist.polygon, SVG.polygon.content }
# end of SVG.polygon.element
attlist.polygon &=
  SVG.Core.attrib,
  SVG.Conditional.attrib,
  SVG.Style.attrib,
  SVG.Paint.attrib,
  SVG.Color.attrib,
  SVG.Opacity.attrib,
  SVG.Graphics.attrib,
  SVG.Marker.attrib,
  SVG.Clip.attrib,
  SVG.Mask.attrib,
  SVG.Filter.attrib,
  SVG.GraphicalEvents.attrib,
  SVG.Cursor.attrib,
  SVG.External.attrib,
  attribute points { Points.datatype },
  attribute transform { TransformList.datatype }?
# end of SVG.polygon.attlist

# end of svg-shape.mod
