# .......................................................................

# SVG 1.1 Structure Module ..............................................

# file: svg-structure.mod
# 
# This is SVG, a language for describing two-dimensional graphics in XML.
# Copyright 2001, 2002 W3C (MIT, INRIA, Keio), All Rights Reserved.
# Revision: $Id: svg-structure.mod,v 1.5 2002/11/14 15:11:03 fujisawa Exp $
# 
# This DTD module is identified by the PUBLIC and SYSTEM identifiers:
# 
#    PUBLIC "-//W3C//ELEMENTS SVG 1.1 Structure//EN"
#    SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg-structure.mod"
# 
# .......................................................................

# Structure
# 
#    svg, g, defs, desc, title, metadata, symbol, use
# 
# This module declares the major structural elements and their attributes.

# Qualified Names (Default) .........................

# Attribute Collections (Default) ...................

# SVG.Description.class .............................

# SVG.Use.class .....................................

# SVG.Structure.class ...............................

# SVG.Presentation.attrib ...........................

default namespace = "http://www.w3.org/2000/svg"
namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"

SVG.Presentation.extra.attrib = empty
SVG.Presentation.attrib =
  SVG.Container.attrib,
  SVG.Viewport.attrib,
  SVG.Text.attrib,
  SVG.TextContent.attrib,
  SVG.Font.attrib,
  SVG.Paint.attrib,
  SVG.Color.attrib,
  SVG.Opacity.attrib,
  SVG.Graphics.attrib,
  SVG.Marker.attrib,
  SVG.ColorProfile.attrib,
  SVG.Gradient.attrib,
  SVG.Clip.attrib,
  SVG.Mask.attrib,
  SVG.Filter.attrib,
  SVG.FilterColor.attrib,
  SVG.Cursor.attrib,
  attribute flood-color { SVGColor.datatype }?,
  attribute flood-opacity { OpacityValue.datatype }?,
  attribute lighting-color { SVGColor.datatype }?,
  SVG.Presentation.extra.attrib
# svg: SVG Document Element .........................
SVG.svg.extra.content = notAllowed
SVG.svg.content =
  (SVG.Description.class
   | SVG.Animation.class
   | SVG.Structure.class
   | SVG.Conditional.class
   | SVG.Image.class
   | SVG.Style.class
   | SVG.Shape.class
   | SVG.Text.class
   | SVG.Marker.class
   | SVG.ColorProfile.class
   | SVG.Gradient.class
   | SVG.Pattern.class
   | SVG.Clip.class
   | SVG.Mask.class
   | SVG.Filter.class
   | SVG.Cursor.class
   | SVG.Hyperlink.class
   | SVG.View.class
   | SVG.Script.class
   | SVG.Font.class
   | SVG.svg.extra.content)*
svg = element svg { attlist.svg, SVG.svg.content }
# end of SVG.svg.element
attlist.svg &=
  SVG.xmlns.attrib,
  SVG.Core.attrib,
  SVG.Conditional.attrib,
  SVG.Style.attrib,
  SVG.Presentation.attrib,
  SVG.DocumentEvents.attrib,
  SVG.GraphicalEvents.attrib,
  SVG.External.attrib,
  attribute x { Coordinate.datatype }?,
  attribute y { Coordinate.datatype }?,
  attribute width { Length.datatype }?,
  attribute height { Length.datatype }?,
  attribute viewBox { ViewBoxSpec.datatype }?,
  [ a:defaultValue = "xMidYMid meet" ]
  attribute preserveAspectRatio { PreserveAspectRatioSpec.datatype }?,
  [ a:defaultValue = "magnify" ]
  attribute zoomAndPan { "disable" | "magnify" }?,
  [ a:defaultValue = "1.1" ] attribute version { string "1.1" }?,
  attribute baseProfile { Text.datatype }?,
  [ a:defaultValue = "text/ecmascript" ]
  attribute contentScriptType { ContentType.datatype }?,
  [ a:defaultValue = "text/css" ]
  attribute contentStyleType { ContentType.datatype }?
# end of SVG.svg.attlist

# g: Group Element ..................................
SVG.g.extra.content = notAllowed
SVG.g.content =
  (SVG.Description.class
   | SVG.Animation.class
   | SVG.Structure.class
   | SVG.Conditional.class
   | SVG.Image.class
   | SVG.Style.class
   | SVG.Shape.class
   | SVG.Text.class
   | SVG.Marker.class
   | SVG.ColorProfile.class
   | SVG.Gradient.class
   | SVG.Pattern.class
   | SVG.Clip.class
   | SVG.Mask.class
   | SVG.Filter.class
   | SVG.Cursor.class
   | SVG.Hyperlink.class
   | SVG.View.class
   | SVG.Script.class
   | SVG.Font.class
   | SVG.g.extra.content)*
g = element g { attlist.g, SVG.g.content }
# end of SVG.g.element
attlist.g &=
  SVG.Core.attrib,
  SVG.Conditional.attrib,
  SVG.Style.attrib,
  SVG.Presentation.attrib,
  SVG.GraphicalEvents.attrib,
  SVG.External.attrib,
  attribute transform { TransformList.datatype }?
# end of SVG.g.attlist

# defs: Definisions Element .........................
SVG.defs.extra.content = notAllowed
SVG.defs.content =
  (SVG.Description.class
   | SVG.Animation.class
   | SVG.Structure.class
   | SVG.Conditional.class
   | SVG.Image.class
   | SVG.Style.class
   | SVG.Shape.class
   | SVG.Text.class
   | SVG.Marker.class
   | SVG.ColorProfile.class
   | SVG.Gradient.class
   | SVG.Pattern.class
   | SVG.Clip.class
   | SVG.Mask.class
   | SVG.Filter.class
   | SVG.Cursor.class
   | SVG.Hyperlink.class
   | SVG.View.class
   | SVG.Script.class
   | SVG.Font.class
   | SVG.defs.extra.content)*
defs = element defs { attlist.defs, SVG.defs.content }
# end of SVG.defs.element
attlist.defs &=
  SVG.Core.attrib,
  SVG.Conditional.attrib,
  SVG.Style.attrib,
  SVG.Presentation.attrib,
  SVG.GraphicalEvents.attrib,
  SVG.External.attrib,
  attribute transform { TransformList.datatype }?
# end of SVG.defs.attlist

# desc: Description Element .........................
SVG.desc.extra.content = notAllowed
SVG.desc.content = (text | SVG.desc.extra.content)*
desc = element desc { attlist.desc, SVG.desc.content }
# end of SVG.desc.element
attlist.desc &= SVG.Core.attrib, SVG.Style.attrib
# end of SVG.desc.attlist

# title: Title Element ..............................
SVG.title.extra.content = notAllowed
SVG.title.content = (text | SVG.title.extra.content)*
title = element title { attlist.title, SVG.title.content }
# end of SVG.title.element
attlist.title &= SVG.Core.attrib, SVG.Style.attrib
# end of SVG.title.attlist

# metadata: Metadata Element ........................
SVG.metadata.extra.content = notAllowed
SVG.metadata.content = (text | SVG.metadata.extra.content)*
metadata = element metadata { attlist.metadata, SVG.metadata.content }
# end of SVG.metadata.element
attlist.metadata &= SVG.Core.attrib
# end of SVG.metadata.attlist

# symbol: Symbol Element ............................
SVG.symbol.extra.content = notAllowed
SVG.symbol.content =
  (SVG.Description.class
   | SVG.Animation.class
   | SVG.Structure.class
   | SVG.Conditional.class
   | SVG.Image.class
   | SVG.Style.class
   | SVG.Shape.class
   | SVG.Text.class
   | SVG.Marker.class
   | SVG.ColorProfile.class
   | SVG.Gradient.class
   | SVG.Pattern.class
   | SVG.Clip.class
   | SVG.Mask.class
   | SVG.Filter.class
   | SVG.Cursor.class
   | SVG.Hyperlink.class
   | SVG.View.class
   | SVG.Script.class
   | SVG.Font.class
   | SVG.symbol.extra.content)*
symbol = element symbol { attlist.symbol, SVG.symbol.content }
# end of SVG.symbol.element
attlist.symbol &=
  SVG.Core.attrib,
  SVG.Style.attrib,
  SVG.Presentation.attrib,
  SVG.GraphicalEvents.attrib,
  SVG.External.attrib,
  attribute viewBox { ViewBoxSpec.datatype }?,
  [ a:defaultValue = "xMidYMid meet" ]
  attribute preserveAspectRatio { PreserveAspectRatioSpec.datatype }?
# end of SVG.symbol.attlist

# use: Use Element ..................................
SVG.use.extra.content = notAllowed
SVG.use.content =
  SVG.Description.class*, (SVG.Animation.class | SVG.use.extra.content)*
use = element use { attlist.use, SVG.use.content }
# end of SVG.use.element
attlist.use &=
  SVG.Core.attrib,
  SVG.Conditional.attrib,
  SVG.Style.attrib,
  SVG.Presentation.attrib,
  SVG.GraphicalEvents.attrib,
  SVG.XLinkEmbed.attrib,
  SVG.External.attrib,
  attribute x { Coordinate.datatype }?,
  attribute y { Coordinate.datatype }?,
  attribute width { Length.datatype }?,
  attribute height { Length.datatype }?,
  attribute transform { TransformList.datatype }?
# end of SVG.use.attlist

# end of svg-structure.mod
